#!/bin/sh
#---------------------------------------------
#   xdg-open
#
#   Utility script to open a URL in the registered default application.
#
#   Refer to the usage() function below for usage.
#
#   Copyright 2009-2010, Fathi Boudra <fabo@freedesktop.org>
#   Copyright 2009-2016, Rex Dieter <rdieter@fedoraproject.org>
#   Copyright 2006, Kevin Krammer <kevin.krammer@gmx.at>
#   Copyright 2006, Jeremy White <jwhite@codeweavers.com>
#
#   LICENSE:
#
#---------------------------------------------

manualpage()
{
cat << '_MANUALPAGE'
_MANUALPAGE
}

usage()
{
cat << '_USAGE'
_USAGE
}

XDG_UTILS_ENABLE_DOUBLE_HYPEN="y"

#@xdg-utils-common@

# (string_that_may_be_an_url)
has_url_scheme()
{
	echo "$1" | LC_ALL=C grep -Eq '^[[:alpha:]][[:alpha:][:digit:]+\.\-]*:'
}

# Returns true if argument is a file:// URL or path
# (url_or_path)
is_file_url_or_path()
{
    if echo "$1" | grep -q '^file://' || ! has_url_scheme "$1" ; then
        return 0
    else
        return 1
    fi
}

# ()
get_hostname() {
    if [ -z "$HOSTNAME" ]; then
        if command -v hostname > /dev/null; then
            HOSTNAME=$(hostname)
        else
            HOSTNAME=$(uname -n)
        fi
    fi
}

# If argument is a file URL, convert it to a (percent-decoded) path.
# If not, leave it as it is.
# (file_url)
file_url_to_path()
{
    local file="$1"
    get_hostname
    if echo "$file" | grep -q '^file://'; then
        file=${file#file://localhost}
        file=${file#file://"$HOSTNAME"}
        file=${file#file://}
        if ! echo "$file" | grep -q '^/'; then
            echo "$file"
            return
        fi
        file=${file%%#*}
        file=${file%%\?*}
        local printf=printf
        if [ -x /usr/bin/printf ]; then
            printf=/usr/bin/printf
        fi
        file=$($printf "$(echo "$file" | sed -e 's@%\([a-f0-9A-F]\{2\}\)@\\x\1@g')")
    fi
    echo "$file"
}

# (url_or_path)
open_cygwin()
{
    cygstart "$1"

    if [ $? -eq 0 ]; then
        exit_success
    else
        exit_failure_operation_failed
    fi
}

# (url_or_path)
open_darwin()
{
    open "$1"

    if [ $? -eq 0 ]; then
        exit_success
    else
        exit_failure_operation_failed
    fi
}

# (url_or_path)
open_kde()
{
    if [ -n "${KDE_SESSION_VERSION}" ]; then
      case "${KDE_SESSION_VERSION}" in
        4)
          kde-open "$1"
        ;;
        5)
          "kde-open${KDE_SESSION_VERSION}" "$1"
        ;;
        6)
          kde-open "$1"
        ;;
        *)
	      DEBUG 0 "Detected an unknown KDE version using the KDE_SESSION_VERSION environment variable."
	      DEBUG 1 "If you are on something newer than Plasma 6 you are likely running an outdated version of the xdg-utils, please check for updates."
	      DEBUG 0 "Falling back to the generic opener."
	      open_generic "$1"
        ;;
      esac
    else
        kfmclient exec "$1"
        kfmclient_fix_exit_code $?
    fi

    if [ $? -eq 0 ]; then
        exit_success
    else
        exit_failure_operation_failed
    fi
}

# (url_or_path)
open_deepin()
{
    if dde-open -version >/dev/null 2>&1; then
        dde-open "$1"
    else
        open_generic "$1"
    fi

    if [ $? -eq 0 ]; then
        exit_success
    else
        exit_failure_operation_failed
    fi
}

# (url_or_path)
open_gnome3()
{
    if gio help open 2>/dev/null 1>&2; then
        gio open "$1"
    elif gvfs-open --help 2>/dev/null 1>&2; then
        gvfs-open "$1"
    else
        open_generic "$1"
    fi

    if [ $? -eq 0 ]; then
        exit_success
    else
        exit_failure_operation_failed
    fi
}

# (url_or_path)
open_gnome()
{
    if gio help open 2>/dev/null 1>&2; then
        gio open "$1"
    elif gvfs-open --help 2>/dev/null 1>&2; then
        gvfs-open "$1"
    elif gnome-open --help 2>/dev/null 1>&2; then
        gnome-open "$1"
    else
        open_generic "$1"
    fi

    if [ $? -eq 0 ]; then
        exit_success
    else
        exit_failure_operation_failed
    fi
}

# (url_or_path)
open_mate()
{
    if gio help open 2>/dev/null 1>&2; then
        gio open "$1"
    elif gvfs-open --help 2>/dev/null 1>&2; then
        gvfs-open "$1"
    elif mate-open --help 2>/dev/null 1>&2; then
        mate-open "$1"
    else
        open_generic "$1"
    fi

    if [ $? -eq 0 ]; then
        exit_success
    else
        exit_failure_operation_failed
    fi
}

# (url_or_path)
open_xfce()
{
    if xfce-open --help 2>/dev/null 1>&2; then
        xfce-open "$1"
    elif exo-open --help 2>/dev/null 1>&2; then
        exo-open "$1"
    elif gio help open 2>/dev/null 1>&2; then
        gio open "$1"
    elif gvfs-open --help 2>/dev/null 1>&2; then
        gvfs-open "$1"
    else
        open_generic "$1"
    fi

    if [ $? -eq 0 ]; then
        exit_success
    else
        exit_failure_operation_failed
    fi
}

# (url_or_path)
open_enlightenment()
{
    if enlightenment_open --help 2>/dev/null 1>&2; then
        enlightenment_open "$1"
    else
        open_generic "$1"
    fi

    if [ $? -eq 0 ]; then
        exit_success
    else
        exit_failure_operation_failed
    fi
}

# (url_or_path)
open_gdbus()
{
    if is_file_url_or_path "$1"; then
        local file
        file="$(file_url_to_path "$1")"

        check_input_file "$file"

        gdbus call --session \
            --dest org.freedesktop.portal.Desktop \
            --object-path /org/freedesktop/portal/desktop \
            --method org.freedesktop.portal.OpenURI.OpenFile \
            --timeout 5 \
            "" "3" {} 3< "$file"
    else
        # $1 contains an URI

        gdbus call --session \
            --dest org.freedesktop.portal.Desktop \
            --object-path /org/freedesktop/portal/desktop \
            --method org.freedesktop.portal.OpenURI.OpenURI \
            --timeout 5 \
            "" "$1" {}
    fi

    if [ $? -eq 0 ]; then
        exit_success
    else
        exit_failure_operation_failed
    fi
}

#-----------------------------------------
# Recursively search .desktop file

awk_script_open_with_desktop_file="$(cat << 'AWKEOF'
BEGIN {

	debug_level = ENVIRON["XDG_UTILS_DEBUG_LEVEL"]

	if (uri_arg) {
		split(uri_arg, split_uri_arg, " ")
	}

	has_uri = 0;
	filec = 0;
	for (i=1; split_uri_arg[i]; i++) {
		has_uri = 1;
		uri = split_uri_arg[i]
		uris[i-1] = uri;
		debug(2, "URI: " uri)
		if (file_arg != "") {
			file = decode_local_file_uri(uri)
			if (file) {
				debug(2, "File: " file)
				files[filec] = file;
				filec = filec + 1;
			}
		}
	}

	if (file_arg != "") {
		debug(2, "File: " file_arg)
		files[filec] = file_arg;
		filec = filec + 1;
		if (!has_uri) {
			debug(2, "URI (falling back to file path): " file_arg)
			uris[0] = file_arg
		}
	}
	
	in_main_section = 0;

	exec_value = 0;
	icon_value = 0;
	name_value = 0;
}

/^\[/ {
	in_main_section = 0;
}

$0 == "[Desktop Entry]" {
	in_main_section = 1
}

function unescape_value(escaped) {
	value = ""
	for (i=1; i<=length(escaped); i++) {
		char = substr(escaped, i, 1)
		if (char == "\\") {
			i = i+1
			next_char = substr(escaped,i,1);
			if (next_char == "s") {
				value = value " ";
			} else if (next_char == "n") {
				value = value "\n";
			} else if (next_char == "t") {
				value = value "\t";
			} else if (next_char == "r") {
				value = value "\r";
			} else if (next_char == "\\") {
				value = value "\\";
			}
		} else {
			value = value char
		}
	}
	return value;
}

function split_exec_value(value, out_args) {
	argc = 0;
	in_quote = 0;
	current_arg = "";
	next_is_literal = 0;
	for (i=1; i<=length(value); i++) {
		char = substr(value,i,1)
		if (next_is_literal) {
			next_is_literal = 0;
			current_arg = current_arg char
			continue
		}
		if (in_quote) {
			if (char == "\"") {
				in_quote = 0;
				out_args[argc] = current_arg;
				argc = argc + 1;
				current_arg = "";
			} else if (char == "\\") {
				next_is_literal = 1;
			} else {
				current_arg = current_arg char
			}
		} else {
			if (current_arg == "" && char == "\"") {
				in_quote = 1;
			} else if (char != " ") {
				current_arg = current_arg char
			} else if (current_arg != "") {
				out_args[argc] = current_arg;
				argc = argc + 1;
				current_arg = "";
			}
		}
	}
	if (current_arg != "") {
		out_args[argc] = current_arg;
	}
}

function hex_value(char) {
	value = char - "0";
	if (value >= 0 && value < 10) {
		return value;
	}
	value = char - "a";
	if (value >= 10 && value < 16) {
		return value;
	}
	value = char - "A";
	if (value >= 10 && value < 16) {
		return value;
	}
	return 0;
}

function uri_decode(text) {
	output = ""
	for (i=1; i<=length(text); i++) {
		char = substr(text, i, 1);
		if (char != "%") {
			output = output char;
			continue
		}
		char_a = substr(text, i+1, 1);
		char_b = substr(text, i+2, 1);
		i = i+2;
		numeric = hex_value(char_a)*16+hex_value(char_b);
		if (numeric != 0 && numeric != 47) {
			output = output sprintf("%c", numeric)
		}
	}
	return output;
}

function decode_local_file_uri(uri) {
	if (!match(uri, /^file:\/\//)) {
		return 0;
	}
	host = ""
	path = 0
	slash_count = 0
	host_start = 0
	host_end = 0
	path_start = 0
	for (i=1; i<=length(uri); i++) {
		char = substr(text, i, 1);
		if (char == "/") {
			slash_count++;
			if (slash_count == 2) {
				host_start = i;
			}
			if (slash_count == 3) {
				path_start = i;
			}
			continue
		} else if (host_start && char == ":") {
			host_end = i;
		} else if (char == "?" || char == "#") {
			if (path_start) {
				path = substr(uri, path_start, i - path_start)
			}
			# ignore that we wouldn't fully parse the hostname in this case,
			# if the hostname isn't finished here it'll fail anyway.
			break
		}
		if (host_start && host_end) {
			host = substr(uri, host_start, host_end - host_start);
		}
	}
	# Hostname must either be empty, "localhost" or match local hostname
	if (host != "" && host != "localhost" && host != hostname) {
		return 0;
	}
	if (path) {
		return uri_decode(path)
	}
	return 0;
}

function debug(level, text) {
	if (!debug_level) {
		return;
	}
	if (level <= debug_level) {
		print "DEBUG: " text >> "/dev/stderr";
	}
}

function error(text) {
	printf("err\0");
	print "xdg-open ERROR: " text >> "/dev/stderr";
	exit 4
}

in_main_section && match($0, /^[^#=\[]+\[?[^=\]]*\]?=/) {
	index_of_eq = index($0, "=");
	index_of_bracket_open = index($0, "[");
	if (index_of_bracket_open && index_of_bracket_open < index_of_eq) {
		key = substr($0, 1, index_of_bracket_open-1)
		local = substr($0, index_of_bracket_open+1, index_of_eq-index_of_bracket_open-2);
	} else {
		key = substr($0, 1, index_of_eq-1);
		local = "";
	}
	value = substr($0, index_of_eq+1);
	debug(4, "Key: " key " Local: " local " Value: " value);
	if (key == "Exec") {
		exec_value = unescape_value(value);
	} else if (key == "Icon") {
		icon_value = unescape_value(value);
	} else if (key == "Name") {
		# TODO: handle actual localization
		if (local == "") {
			name_value = unescape_value(value)
		}
	}
}

END {
	if (!exec_value) {
		print "xdg-open: No Exec= line found in main section of desktop file!" >> "/dev/stderr";
		exit 1;
	}
	debug(2, "Unescaped: " exec_value)
	split_exec_value(exec_value, args)
	# Field code expansion
	expanded_args[0] = "";
	eargc = 0;
	found_file_field_codes = 0;
	for (i=0; args[i]; i++) {
		arg = args[i];
		debug(2, "Running field code expansion on arg: " arg);
		if (arg == "%F") {
			for (j=0; j<length(files); j++) {
				expanded_args[eargc] = files[j];
				eargc = eargc + 1;
			}
			found_file_field_codes++;
			continue
		} else if (arg == "%U") {
			for (j=0; j<length(uris); j++) {
				expanded_args[eargc] = uris[j];
				eargc = eargc + 1;
			}
			found_file_field_codes++;
			continue
		} else if (arg == "%i") {
			if (icon_value) {
				expanded_args[eargc] = "--icon"
				expanded_args[eargc] = icon_value
				eargc = eargc + 1;
			}
			continue
		}
		debug(2, "Trying to find in-text field code ...");
		expanded_arg = ""
		for (j=1; j<=length(arg); j++) {
			char = substr(arg,j,1);
			if (char != "%") {
				expanded_arg = expanded_arg char
				continue
			}
			j = j+1;
			char = substr(arg,j,1);
			debug(2, "Found field code expansion: %" char);
			if (char == "%") {
				expanded_arg = expanded_arg "%"
			} else if (char == "f") {
				# Take just the first arg for the prototype
				expanded_arg = expanded_arg files[0];
				found_file_field_codes++;
			} else if (char == "u") {
				# Take just the first arg for the prototype
				expanded_arg = expanded_arg uris[0];
				found_file_field_codes++;
			} else if (char == "c") {
				if (name_value) {
					expanded_arg = expanded_arg name_value
				}
			} else if (char == "k") {
				# Location of desktop file either as URI or local filename
				# Ignore for now
				# TODO
			} else if (char == "d" || char == "D" || char == "n" || char == "N") {
				# Deprecated, silently remove
			} else if (char == "i" || char == "U" || char == "F") {
				error("xdg-open: Field code %" char "must be stand alone as it expands into multiple arguments!")
			} else {
				error("xdg-open: Unknown field code: %" char " in Exec key!");
			}
		}
		if (found_file_field_codes > 1) {
			error("xdg-open: More than one file field codes (%f, %F, %u, %U) in Exec key, this .desktop file is invalid!");
		}
		expanded_args[eargc] = expanded_arg;
		eargc = eargc + 1;
	}

	if (found_file_field_codes == 0) {
		debug(1, "Didn't find a file field code (%f, %F, %u, %U), appending filepath/url as last argument");
		if (files[0]) {
			expanded_args[eargc] = files[0];
		} else {
			expanded_args[eargc] = uris[0];
		}
		eargc = eargc + 1;
	}

	printf("cmd\0");
	for (i=0; expanded_args[i]; i++) {
		debug(1, "Arg: " expanded_args[i]);
		printf("%s\0", expanded_args[i]);
	}
	exit
}
AWKEOF
)"


# (desktop_file, file, uri (optional))
open_with_desktop_file()
{
	# shellcheck disable=SC2016 # Not expanding is intended here
	awk -v"hostname=$(get_hostname)" -v"file_arg=$2" -v"uri_arg=$3" "$awk_script_open_with_desktop_file" < "$1" | xargs -0 -x sh -c 'if [ "$1" = "cmd" ] ; then shift; exec "$@" ; else exit 4 ; fi' -
	if [ "$?" -eq 123 ] ; then
		exit_failure_operation_failed
	fi
}

#(application, directory, target_file, target_url (optional))
search_desktop_file()
{
    local default="$1"
    local dir="$2"
    local target="$3"
    local target_uri="$4"

    local file=""
    # look for both vendor-app.desktop, vendor/app.desktop
    if [ -r "$dir/$default" ]; then
      file="$dir/$default"
    elif [ -r "$dir/$(echo "$default" | sed -e 's|-|/|')" ]; then
      file="$dir/$(echo "$default" | sed -e 's|-|/|')"
    fi

    if [ -r "$file" ] ; then
		open_with_desktop_file "$file" "$target" "$target_uri"
		exit_success
    fi

    for d in "$dir/"*/; do
        [ -d "$d" ] && search_desktop_file "$default" "$d" "$target" "$target_uri"
    done
}

# (file (or empty), mimetype, optional url)
open_generic_xdg_mime()
{
    filetype="$2"
    default="$(xdg-mime query default "$filetype")"
    if [ -n "$default" ] ; then
        xdg_user_dir="$XDG_DATA_HOME"
        [ -n "$xdg_user_dir" ] || xdg_user_dir="$HOME/.local/share"

        xdg_system_dirs="$XDG_DATA_DIRS"
        [ -n "$xdg_system_dirs" ] || xdg_system_dirs=/usr/local/share/:/usr/share/

        search_dirs="$xdg_user_dir:$xdg_system_dirs"
        DEBUG 3 "$search_dirs"
        old_ifs="$IFS"
        IFS=:
        for x in $search_dirs ; do
            IFS="$old_ifs"
            search_desktop_file "$default" "$x/applications/" "$1" "$3"
        done
    fi
}

# Open an url using the x-scheme-handler/<scheme> dummy mimetype
# (url)
open_generic_xdg_x_scheme_handler()
{
    scheme="$(echo "$1" | LC_ALL=C sed -n 's/\(^[[:alpha:]][[:alnum:]+\.-]*\):.*$/\1/p')"
    if [ -n "$scheme" ]; then
        filetype="x-scheme-handler/$scheme"
        open_generic_xdg_mime "" "$filetype" "$1"
    fi
}

# (args ...)
has_single_argument()
{
  test $# = 1
}

# Open an url or path using the BROWSER variable.
# Exits on success retuerns otherwise.
# (url_or_path)
open_envvar()
{
    local oldifs="$IFS"
    local browser

    IFS=":"
    for browser in $BROWSER; do
        IFS="$oldifs"

        if [ -z "$browser" ]; then
            continue
        fi

        if echo "$browser" | grep -q %s; then
            # Avoid argument injection.
            # See https://bugs.freedesktop.org/show_bug.cgi?id=103807
            # URIs don't have IFS characters spaces anyway.
            # shellcheck disable=SC2086,SC2091,SC2059
            # All the scary things here are intentional
            has_single_argument $1 && $(printf "$browser" "$1")
        else
            $browser "$1"
        fi

        if [ $? -eq 0 ]; then
            exit_success
        fi
    done
}

# (url_or_path)
open_wsl()
{
    local win_path
    if is_file_url_or_path "$1" ; then
        win_path="$(file_url_to_path "$1")"
        win_path="$(wslpath -aw "$win_path")"
        [ $? -eq 0 ] || exit_failure_operation_failed
        explorer.exe "${win_path}"
    else
        rundll32.exe url.dll,FileProtocolHandler "$1" 
    fi

    if [ $? -eq 0 ]; then
        exit_success
    else
        exit_failure_operation_failed
    fi
}

# (url_or_path)
open_generic()
{
    if is_file_url_or_path "$1"; then
        local file
        file="$(file_url_to_path "$1")"

        check_input_file "$file"

        if has_display; then
            filetype="$(xdg-mime query filetype "$file" | sed "s/;.*//")"
            # passing a path a url is okay too,
            # see desktop file specification for '%u'
			if has_url_scheme "$1" ; then
				open_generic_xdg_mime "$file" "$filetype" "$1"
			else
				open_generic_xdg_mime "$file" "$filetype"
			fi
        fi

        if command -v run-mailcap >/dev/null; then
            run-mailcap --action=view "$file"
            if [ $? -eq 0 ]; then
                exit_success
            fi
        fi

        if has_display && mimeopen -v 2>/dev/null 1>&2; then
            mimeopen -L -n "$file"
            if [ $? -eq 0 ]; then
                exit_success
            fi
        fi
    fi

    if has_display; then
        open_generic_xdg_x_scheme_handler "$1"
    fi

    if [ -n "$BROWSER" ]; then
        open_envvar "$1"
    fi

    # if BROWSER variable is not set, check some well known browsers instead
    if [ x"$BROWSER" = x"" ]; then
        BROWSER=www-browser:links2:elinks:links:lynx:w3m
        if has_display; then
            BROWSER=x-www-browser:firefox:iceweasel:seamonkey:mozilla:epiphany:konqueror:chromium:chromium-browser:google-chrome:$BROWSER
        fi
    fi

    open_envvar "$1"

    exit_failure_operation_impossible "no method available for opening '$1'"
}

# (url_or_path)
open_lxde()
{

    # pcmanfm only knows how to handle file:// urls and filepaths, it seems.
    if pcmanfm --help >/dev/null 2>&1 && is_file_url_or_path "$1"; then
        local file
        file="$(file_url_to_path "$1")"

        # handle relative paths
        if ! echo "$file" | grep -q ^/; then
            file="$(pwd)/$file"
        fi

        pcmanfm "$file"
    else
        open_generic "$1"
    fi

    if [ $? -eq 0 ]; then
        exit_success
    else
        exit_failure_operation_failed
    fi
}

# (url_or_path)
open_lxqt()
{
    if qtxdg-mat open --help 2>/dev/null 1>&2; then
        qtxdg-mat open "$1"
    else
        exit_failure_operation_impossible "no method available for opening '$1'"
    fi

    if [ $? -eq 0 ]; then
        exit_success
    else
        exit_failure_operation_failed
    fi
}

open_one_argument()
{
    url="$1"
    case "$DE" in
        kde)
            open_kde "$url"
            ;;

        deepin)
            open_deepin "$url"
            ;;

        gnome3|cinnamon)
            open_gnome3 "$url"
            ;;

        gnome)
            open_gnome "$url"
            ;;

        mate)
            open_mate "$url"
            ;;

        xfce)
            open_xfce "$url"
            ;;

        lxde)
            open_lxde "$url"
            ;;

        lxqt)
            open_lxqt "$url"
            ;;

        enlightenment)
            open_enlightenment "$url"
            ;;

        cygwin)
            open_cygwin "$url"
            ;;

        darwin)
            open_darwin "$url"
            ;;

        flatpak|toolbx)
            open_gdbus "$url"
            ;;

        wsl)
            open_wsl "$url"
            ;;

        generic)
            open_generic "$1"
            ;;

        *)
            exit_failure_operation_impossible "no method available for opening '$1'"
            ;;
    esac
}

[ x"$1" != x"" ] || exit_failure_syntax

detectDE

if [ x"$DE" = x"" ]; then
    DE=generic
fi

DEBUG 2 "Selected DE $DE"

# sanitize BROWSER (avoid calling ourselves in particular)
case "${BROWSER}" in
    *:"xdg-open"|"xdg-open":*)
        BROWSER="$(echo "$BROWSER" | sed -e 's|:xdg-open||g' -e 's|xdg-open:||g')"
        ;;
    "xdg-open")
        BROWSER=
        ;;
esac

# Handle the URL arguments and script-specific options.
NOWAIT=0
err=0

# (arg, remaining_args)
handle_positional_arg() {
	echo "remaining: $2"
	if [ "$2" -gt 0 ] || [ "$NOWAIT" = 1 ]; then
		(open_one_argument "$1" &)
	else
		(open_one_argument "$1")
	fi
	this_err=$?
	if [ $err -eq 0 ]; then
		err=$this_err
	fi
}

while [ $# -gt 0 ]; do
    parm="$1"
    shift

    case "$parm" in
        --nowait)
            NOWAIT=1
            ;;

		--)
			break
			;;

        -*)
            exit_failure_syntax "unexpected option '$parm'"
            ;;

        *)
	        handle_positional_arg "$parm" "$#"
            ;;
    esac
done

# handle positional arguments after a --
while [ $# -gt 0 ]; do
	parm="$1"
	shift
	handle_positional_arg "$parm" "$#"
done

exit $err
