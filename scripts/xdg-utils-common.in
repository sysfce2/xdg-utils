#----------------------------------------------------------------------------
#   Common utility functions included in all XDG wrapper scripts
#----------------------------------------------------------------------------

#shellcheck shell=sh

# (level, echo_args ...)
DEBUG()
{
  [ -z "${XDG_UTILS_DEBUG_LEVEL}" ] && return 0;
  [ "${XDG_UTILS_DEBUG_LEVEL}" -lt "$1" ] && return 0;
  shift
  echo "$@" >&2
}

# This handles backslashes but not quote marks.
# 
# (text)
# shellcheck disable=SC2317 # Not using this function is okay
first_word()
{
    # shellcheck disable=SC2162 # No -r is intended here
    read first rest
    echo "$first"
}

#-------------------------------------------------------------
# map a binary to a .desktop file
# 
# (command_or_path_to_binary)
# shellcheck disable=SC2317 # Not using this function is okay
binary_to_desktop_file()
{
    if [ -z "$1" ] ; then
        DEBUG 2 "binary_to_desktop_file argument is empty"
        return
    fi
    search="${XDG_DATA_HOME:-$HOME/.local/share}:${XDG_DATA_DIRS:-/usr/local/share:/usr/share}"
    binary="$(command -v "$1")"
    binary="$(xdg_realpath "$binary")"
    base="$(basename "$binary")"
    IFS=:
    for dir in $search; do
        unset IFS
        [ "$dir" ] || continue
        [ -d "$dir/applications" ] || [ -d "$dir/applnk" ] || continue
        for file in "$dir"/applications/*.desktop "$dir"/applications/*/*.desktop "$dir"/applnk/*.desktop "$dir"/applnk/*/*.desktop; do
            [ -r "$file" ] || continue
            # Check to make sure it's worth the processing.
            grep -q "^Exec.*$base" "$file" || continue
            # Make sure it's a visible desktop file (e.g. not "preferred-web-browser.desktop").
            grep -Eq "^(NoDisplay|Hidden)=true" "$file" && continue
            command="$(grep -E "^Exec(\[[^]=]*])?=" "$file" | cut -d= -f 2- | first_word)"
            command="$(command -v "$command")"
            if [ x"$(xdg_realpath "$command")" = x"$binary" ]; then
                # Fix any double slashes that got added path composition
                echo "$file" | tr -s /
                return
            fi
        done
    done
}

#-------------------------------------------------------------
# map a .desktop file name to its Exec binary
# Returns the realpath resolved path to the binary or noting.

# (desktop_file_name)
# shellcheck disable=SC2317 # Not using this function is okay
desktop_file_to_binary()
{
    DEBUG 1 "desktop_file_to_binary '$1'"
    if [ -z "$1" ] ; then
        DEBUG 2 "desktop_file_to_binary argument is empty"
        return
    fi
    search="${XDG_DATA_HOME:-$HOME/.local/share}:${XDG_DATA_DIRS:-/usr/local/share:/usr/share}"
    desktop="$(basename "$1")"
    IFS=:
    for dir in $search; do
        DEBUG 2 "Searching in '$dir/{applications,applnk}'"
        unset IFS
        [ -n "$dir" ] && [ -d "$dir/applications" ] || [ -d "$dir/applnk" ] || continue
        # Check if desktop file contains -
        if [ "${desktop#*-}" != "$desktop" ]; then
            vendor="${desktop%-*}"
            app="${desktop#*-}"
            if [ -r "$dir/applications/$vendor/$app" ]; then
                file_path="$dir/applications/$vendor/$app"
            elif [ -r "$dir/applnk/$vendor/$app" ]; then
                file_path="$dir/applnk/$vendor/$app"
            fi
        fi
        if test -z "$file_path" ; then
            for indir in "$dir"/applications/ "$dir"/applications/*/ "$dir"/applnk/ "$dir"/applnk/*/; do
		        DEBUG 4 "Does file exist? '$indir/$desktop'"
                file="$indir/$desktop"
                if [ -r "$file" ]; then
                    file_path="$file"
                    break
                fi
            done
        fi
        if [ -r "$file_path" ]; then
	        DEBUG 2 "Checking desktop file '$file_path'"
            # Get the command name from the correct Exec
            # Note: Ignoring quoting and escape sequences here, see #253
            binary="$(awk -F '=' '
            	/^\[/{ in_entry=0 }
            	$0 == "[Desktop Entry]"{ in_entry=1 }
            	in_entry && /^Exec\s*=/ {
					sub(/^\s+/,"",$2);
					match($2,/^[^ ]+/);
					print substr($2,RSTART,RLENGTH)
				}' \
            	< "$file_path" )"
            if [ -z "$binary" ] ; then
                DEBUG 2 "No or empty Exec key in .desktop file. Search failed."
                return
            fi
            DEBUG 2 "Found command: $binary"
            binary="$(xdg_which "$binary")"
            DEBUG 2 "Resolved to command to file: '$binary'"
            [ -z "$binary" ] || xdg_realpath "$binary"
            return
        fi
    done
}

#-------------------------------------------------------------
# Exit script on successfully completing the desired operation

# (message (optional))
# shellcheck disable=SC2120 # It is okay to call this without arguments
# shellcheck disable=SC2317 # Not using this function is okay
exit_success()
{
    if [ $# -gt 0 ]; then
        echo "$*"
        echo
    fi

    exit 0
}


#-----------------------------------------
# Exit script on malformed arguments, not enough arguments
# or missing required option.
# prints usage information

# (message (optional))
# shellcheck disable=SC2317 # Not using this function is okay
exit_failure_syntax()
{
    if [ $# -gt 0 ]; then
        echo "@NAME@: $*" >&2
        echo "Try '@NAME@ --help' for more information." >&2
    else
        usage
        echo "Use 'man @NAME@' or '@NAME@ --manual' for additional info."
    fi

    exit 1
}

#-------------------------------------------------------------
# Exit script on missing file specified on command line

# (message (optional))
# shellcheck disable=SC2317 # Not using this function is okay
exit_failure_file_missing()
{
    if [ $# -gt 0 ]; then
        echo "@NAME@: $*" >&2
    fi

    exit 2
}

#-------------------------------------------------------------
# Exit script on failure to locate necessary tool applications

# (message (optional))
# shellcheck disable=SC2317 # Not using this function is okay
exit_failure_operation_impossible()
{
    if [ $# -gt 0 ]; then
        echo "@NAME@: $*" >&2
    fi

    exit 3
}

#-------------------------------------------------------------
# Exit script on failure returned by a tool application

# (message (optional))
# shellcheck disable=SC2317 # Not using this function is okay
exit_failure_operation_failed()
{
    if [ $# -gt 0 ]; then
        echo "@NAME@: $*" >&2
    fi

    exit 4
}

#------------------------------------------------------------
# Exit script on insufficient permission to read a specified file

# (message (optional))
# shellcheck disable=SC2317 # Not using this function is okay
exit_failure_file_permission_read()
{
    if [ $# -gt 0 ]; then
        echo "@NAME@: $*" >&2
    fi

    exit 5
}

#------------------------------------------------------------
# Exit script on insufficient permission to write a specified file

# (message (optional))
# shellcheck disable=SC2317 # Not using this function is okay
exit_failure_file_permission_write()
{
    if [ $# -gt 0 ]; then
        echo "@NAME@: $*" >&2
    fi

    exit 6
}

# (path)
# shellcheck disable=SC2317 # Not using this function is okay
check_input_file()
{
    if [ ! -e "$1" ]; then
        exit_failure_file_missing "file '$1' does not exist"
    fi
    if [ ! -r "$1" ]; then
        exit_failure_file_permission_read "no permission to read file '$1'"
    fi
}

# (label_for_error_message, path_to_check)
# shellcheck disable=SC2317 # Not using this function is okay
check_vendor_prefix()
{
    file_label="$2"
    [ -n "$file_label" ] || file_label="filename"
    file="$(basename "$1")"
    case "$file" in
       [[:alpha:]]*-*)
         return
         ;;
    esac

    echo "@NAME@: $file_label '$file' does not have a proper vendor prefix" >&2
    echo 'A vendor prefix consists of alpha characters ([a-zA-Z]) and is terminated' >&2
    echo 'with a dash ("-"). An example '"$file_label"' is '"'example-$file'" >&2
    echo "Use --novendor to override or '@NAME@ --manual' for additional info." >&2
    exit 1
}

# (path)
# shellcheck disable=SC2317 # Not using this function is okay
check_output_file()
{
    # if the file exists, check if it is writeable
    # if it does not exists, check if we are allowed to write on the directory
    if [ -e "$1" ]; then
        if [ ! -w "$1" ]; then
            exit_failure_file_permission_write "no permission to write to file '$1'"
        fi
    else
        DIR="$(dirname "$1")"
        if [ ! -w "$DIR" ] || [ ! -x "$DIR" ]; then
            exit_failure_file_permission_write "no permission to create file '$1'"
        fi
    fi
}

#----------------------------------------
# Checks for shared commands, e.g. --help

# (args ...)
check_common_commands()
{
    while [ $# -gt 0 ] ; do
        parm="$1"
        shift

        case "$parm" in
            --help)
            usage
            echo "Use 'man @NAME@' or '@NAME@ --manual' for additional info."
            exit_success
            ;;

            --manual)
            manualpage
            exit_success
            ;;

            --version)
            echo "@NAME@ 1.2.99"
            exit_success
            ;;

            --)
	        [ -z "$XDG_UTILS_ENABLE_DOUBLE_HYPEN" ] || break
	        ;;
        esac
    done
}

check_common_commands "$@"

[ -z "${XDG_UTILS_DEBUG_LEVEL}" ] && unset XDG_UTILS_DEBUG_LEVEL;
# shellcheck disable=SC2034
if [ "${XDG_UTILS_DEBUG_LEVEL-0}" -lt 1 ]; then
    # Be silent
    xdg_redirect_output=" > /dev/null 2> /dev/null"
else
    # All output to stderr
    xdg_redirect_output=" >&2"
fi

#--------------------------------------
# Checks for known desktop environments
# set variable DE to the desktop environments name, lowercase
# Don't forget to update the manpage!
#
# ()
detectDE()
{
    # see https://bugs.freedesktop.org/show_bug.cgi?id=34164
    unset GREP_OPTIONS

    # Tool specific desktop override
    xdg_util="$(basename -- "$0" | sed 's/^xdg-//' | tr '[:lower:]' '[:upper:]')"
    # printenv isn't posix, but implemented by almost all coreutils packages
    DE="$(printenv -- "XDG_UTILS_${xdg_util}_OVERRIDE_DE")"
    unset xdg_util
    [ -z "$DE" ] || return

    # General desktop override
    if [ -n "${XDG_UTILS_OVERRIDE_DE}" ]; then
        DE="${XDG_UTILS_OVERRIDE_DE}"
        return
    fi

    # Check for toolbx first; as this runs "inside" an existing
    # environment.
    if [ -f /run/.toolboxenv ]; then
       DE="toolbx"
       return
    fi

    IFS=:
    for desktop in $XDG_CURRENT_DESKTOP ; do
      unset IFS
      case "$desktop" in
         # only recently added to menu-spec, pre-spec X- still in use
         Cinnamon|X-Cinnamon)
           DE=cinnamon;
           ;;
         ENLIGHTENMENT)
           DE=enlightenment;
           ;;
         # GNOME, GNOME-Classic:GNOME, or GNOME-Flashback:GNOME
         GNOME)
           DE=gnome;
           ;;
         KDE)
           DE=kde;
           ;;
         DEEPIN|Deepin|deepin|DDE)
           DE=deepin;
           ;;
         LXDE)
           DE=lxde;
           ;;
         LXQt)
           DE=lxqt;
           ;;
         MATE)
           DE=mate;
           ;;
         XFCE)
           DE=xfce
           ;;
         X-Generic)
           DE=generic
           ;;
      esac
      [ -n "$DE" ] && break
    done

    # shellcheck disable=SC2153
    if [ -z "$DE" ]; then
      # classic fallbacks
      if [ -n "$KDE_FULL_SESSION" ]; then DE=kde;
      elif [ -n "$GNOME_DESKTOP_SESSION_ID" ]; then DE=gnome;
      elif [ -n "$MATE_DESKTOP_SESSION_ID" ]; then DE=mate;
      elif dbus-send --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.GetNameOwner string:org.gnome.SessionManager > /dev/null 2>&1 ; then DE=gnome;
      elif echo "$DESKTOP" | grep -q '^Enlightenment'; then DE=enlightenment;
      elif [ -n "$LXQT_SESSION_CONFIG" ]; then DE=lxqt;
      fi
    fi

    if [ -z "$DE" ]; then
      # fallback to checking $DESKTOP_SESSION
      case "$DESKTOP_SESSION" in
         gnome)
           DE=gnome;
           ;;
         LXDE|Lubuntu)
           DE=lxde;
           ;;
         MATE)
           DE=mate;
           ;;
         xfce|xfce4|'Xfce Session')
           DE=xfce;
           ;;
      esac
    fi

    if [ -z "$DE" ]; then
      # fallback to uname output for other platforms
      case "$(uname 2>/dev/null)" in
        CYGWIN*)
          DE=cygwin;
          ;;
        Darwin)
          DE=darwin;
          ;;
        Linux)
          grep -q microsoft /proc/version > /dev/null 2>&1 && \
          command -v explorer.exe > /dev/null 2>&1 && \
          DE=wsl;
          ;;
      esac
    fi

    if [ x"$DE" = x"gnome" ]; then
      # gnome-default-applications-properties is only available in GNOME 2.x
      # but not in GNOME 3.x
      command -v gnome-default-applications-properties > /dev/null || DE="gnome3"
    fi

    if [ -f "/.flatpak-info" ]; then
      DE="flatpak"
    fi
}

#----------------------------------------------------------------------------
# kfmclient exec/openURL can give bogus exit value in KDE <= 3.5.4
# It also always returns 1 in KDE 3.4 and earlier
# Simply return 0 in such case
# 
# (exit_code)
# shellcheck disable=SC2317 # Not using this function is okay
kfmclient_fix_exit_code()
{
    version="$(LC_ALL=C.UTF-8 kde-config --version 2>/dev/null | grep '^KDE')"
    major="$(echo "$version" | sed 's/KDE.*: \([0-9]\).*/\1/')"
    minor="$(echo "$version" | sed 's/KDE.*: [0-9]*\.\([0-9]\).*/\1/')"
    release="$(echo "$version" | sed 's/KDE.*: [0-9]*\.[0-9]*\.\([0-9]\).*/\1/')"
    test "$major" -gt 3 && return "$1"
    test "$minor" -gt 5 && return "$1"
    test "$release" -gt 4 && return "$1"
    return 0
}

#----------------------------------------------------------------------------
# Returns true if there is a graphical display attached.
#
# ()
# shellcheck disable=SC2317 # Not using this function is okay
has_display()
{
    if [ -n "$DISPLAY" ] || [ -n "$WAYLAND_DISPLAY" ]; then
        return 0
    else
        return 1
    fi
}

#----------------------------------------------------------------------------
# Prefixes a path with a "./" if it starts with a "-".
# This is useful for programs to not confuse paths with options.
#
# ()
# shellcheck disable=SC2317 # Not using this function is okay
unoption_path()
{
	case "$1" in
		-*)
			printf "./%s" "$1" ;;
		*)
			printf "%s" "$1" ;;
	esac
}

#----------------------------------------------------------------------------
# Performs a symlink and relative path resolving for a single argument.
# This will always fail if the given file does not exist!
#
# (path)
# shellcheck disable=SC2317 # Not using this function is okay
xdg_realpath()
{
	# allow caching and external configuration
	if [ -z "$XDG_UTILS_REALPATH_BACKEND" ] ; then
		if command -v realpath >/dev/null 2>/dev/null ; then
			lines="$(realpath -- / 2>&1)"
			if [ $? = 0 ] && [ "$lines" = "/" ] ; then
				XDG_UTILS_REALPATH_BACKEND="realpath"
			else
				# The realpath took the -- literally, probably the busybox implementation
				XDG_UTILS_REALPATH_BACKEND="busybox-realpath"
			fi
			unset lines
		elif command -v readlink >/dev/null 2>/dev/null ; then
			XDG_UTILS_REALPATH_BACKEND="readlink"
		else
			exit_failure_operation_failed "No usable realpath backend found. Have a realpath binary or a readlink -f that canonicalizes paths."
		fi
	fi
	# Always fail if the file doesn't exist (busybox realpath does that for example)
	[ -e "$1" ] || return 1
	case "$XDG_UTILS_REALPATH_BACKEND" in
		realpath)
			realpath -- "$1"
			;;
		busybox-realpath)
			# busybox style realpath implementations have options too
			realpath "$(unoption_path "$1")"
			;;
		readlink)
			readlink -f "$(unoption_path "$1")"
			;;
		*)
			exit_failure_operation_impossible "Realpath backend '$XDG_UTILS_REALPATH_BACKEND' not recognized."
			;;
	esac
}

#----------------------------------------------------------------------------
# The `which` command but as a shell implementation.
# Returns either the path of the resolved binary or nothing
# because command -v does not always return the path of a command
# (builtins, aliases, functions, etc.)
#
# (command)
# shellcheck disable=SC2317 # Not using this function is okay
xdg_which()
{
	case "$1" in
		'') return 1 ;;
		*/*)
			# We got a path containing slashes, test if it is executable
			# and return its absolute path with symlinks resolved.
			if [ -x "$1" ] ; then
				xdg_realpath "$1"
				return 0
			fi
			return 1
			;;
	esac
	# search PATH for command
	old_ifs="$IFS"
	IFS=:
	for p in $PATH ; do
		IFS="$old_ifs"
		if [ -x "$p/$1" ] ; then
			printf "%s\n" "$p/$1"
			return
		fi
	done
	return 1
}

#----------------------------------------------------------------------------
# Helper function that returns the value for `$XDG_CONFIG_HOME`,
# independent of it being explicitly set or simply a fallback.
#
# ()
# shellcheck disable=SC2317 # Not using this function is okay
get_xdg_config_home()
{
	# Only use XDG_CONFIG_HOME if it is an absolute path
	# shellcheck disable=SC2153 # not misspelled
	case "$XDG_CONFIG_HOME" in
		/*) printf "%s\n" "$XDG_CONFIG_HOME" ;;
		*) printf "%s\n" "$HOME/.config" ;;
	esac
}
